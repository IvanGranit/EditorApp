# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'data\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import glob

from PyQt5.QtCore import Qt, QRect
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QLabel, QMainWindow, QWidget, QVBoxLayout, QListWidget, QListWidgetItem, QMessageBox
from qtpy import QtGui
from decoder import lazyDecoder
import json

from Image import Image
from centralLabel import Label
from model import build_model


class Ui_MainWindow(QMainWindow):

    def __init__(self):
        super().__init__()

        self.images_list = []

        self.setObjectName("MainWindow")
        self.resize(1920, 1080)

        self.central_widget = centralWidget()
        self.central_widget.setObjectName("centralwidget")

        self.setCentralWidget(self.central_widget)


class centralWidget(QtWidgets.QWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.images_list = []
        self.dict = {}
        self.list_widgets = QListWidget()
        self.create_list()

        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(10, 0, 121, 30))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText('push')

        self.pushButton_2 = QtWidgets.QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 40, 121, 30))
        self.pushButton_2.setObjectName("pushButton2")

        self.pushButton_3 = QtWidgets.QPushButton(self)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 80, 121, 30))
        self.pushButton_3.setObjectName("pushButton3")

        self.pushButton_4 = QtWidgets.QPushButton(self)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 120, 101, 30))
        self.pushButton_4.setObjectName("pushButton4")

        self.info_line = QLabel('Hellow!', parent=self)
        self.info_line.setGeometry(QtCore.QRect(0, 933, 1920, 30))
        self.info_line.setAlignment(QtCore.Qt.AlignCenter)
        # Убрать в дальнейшем
        self.cen_label = Label(images_list=self.images_list, parent=self)
        self.cen_label.setObjectName("cen_label")
        self.cen_label.setGeometry(140, 100, 1200, 800)
        self.cen_label.setStyleSheet(
            "#cen_label {background-color: rgb(100,120,100);}"
        )

        self.pushButton.clicked.connect(self.on_clicked_2)
        self.pushButton_2.clicked.connect(self.load_project)
        self.pushButton_3.clicked.connect(self.on_clicked_3)
        self.pushButton_4.clicked.connect(self.rewrite)

        self.list_widgets.clicked.connect(self.item_clicked)

    def load_project(self):

        dirlist = QtWidgets.QFileDialog.getExistingDirectory(None, "Выбрать папку", ".")

        if dirlist:
            try:
                with open(dirlist + r'/Контрольные точки/Points', 'r') as ff:
                    self.dict = json.loads(ff.read(), strict=False)
            except Exception as ex:
                self.info_line.setText(f'Error {ex}')
                message = QMessageBox()
                message.setText('Файл Points не найден,\n найти вручную?')
                message.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                answer = message.exec_()
                if answer == QMessageBox.Yes:
                    dirlist, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Выбрать папку",
                                                                       dirlist + '/Контрольные точки/')
                    if dirlist:
                        with open(dirlist, 'r') as ff:
                            self.dict = json.loads(ff.read(), strict=False)
                elif answer == QMessageBox.No or answer == QMessageBox.Close:
                    return

            if self.dict:
                self.list_widgets.clear()
                for el in self.dict['Elements'].keys():
                    self.list_widgets.addItem(QListWidgetItem(el))
                self.list_widgets.setCurrentRow(0)

            self.info_line.setText(f'Elements loaded from {dirlist}')

            # for file in glob.glob(dirlist + r'\Виды\*'):

    def next_item(self):
        self.list_widgets.setCurrentRow(self.list_widgets.currentRow() + 1)
        if self.list_widgets.currentRow() == -1:
            self.end_of_list()

    def end_of_list(self) -> None:
        message = QMessageBox()
        message.setWindowTitle('Конец списка')
        message.setText('Последний элемент списка был успешно обработан')
        message.exec_()

    def item_clicked(self):
        print(f'item clicked {self.list_widgets.currentItem().text()}')

    def to_points_elements(self, points: list):
        assert self.dict, 'NoneType dict'
        element = self.list_widgets.currentItem().text()
        self.dict['Elements'][element]['Views']['0'] = \
            [{'L': int(min(points[0], points[2])) * 5,
              'T': int(min(points[1], points[3])) * 5,
              'R': int(max(points[0], points[2])) * 5,
              'B': int(max(points[1], points[3])) * 5,
              'Section': self.list_widgets.currentItem().text()}]
        self.info_line.setText(f'Element position {self.list_widgets.currentItem().text()} added into Points')

    def to_points_dots(self, dots: list):
        for num, dot in enumerate(dots):
            key = f'{self.list_widgets.currentItem().text()}_{num + 1}'
            if key in self.dict['Dots']:
                self.dict['Dots'][key]['Views']['0'] = \
                    {'L': int(dot[0] * 1.25),
                     'T': int(dot[1] * 1.25),
                     'R': int(dot[0] * 1.25 + 30),
                     'B': int(dot[1] * 1.25 + 30),
                     'Section': ''}
                self.info_line.setText(
                    f'Dot position {self.list_widgets.currentItem().text()}_{num + 1} added into Points')
            else:
                self.info_line.setText(
                    f'Dot position {self.list_widgets.currentItem().text()}_{num + 1} not added into Points')

    def rewrite(self):
        dirlist = QtWidgets.QFileDialog.getExistingDirectory(None, "Выбрать папку", ".")
        with open(dirlist + r'/Контрольные точки/Points', 'w') as ff:
            json.dump(self.dict, ff, indent=1)
        self.info_line.setText(f'File {dirlist}/Контрольные точки/Points rewrite')

    def create_list(self):
        list_area = QWidget(self)
        list_area.setGeometry(QRect(1400, 100, 400, 800))
        list_area.setStyleSheet(
            'border: 3px solid black')
        vbox = QVBoxLayout()
        vbox.addWidget(self.list_widgets)
        list_area.setLayout(vbox)

    def keyPressEvent(self, event: QtGui.QKeyEvent) -> None:

        if event.key() == Qt.Key_Delete:
            print(self.cen_label.objects)
            self.cen_label.objects[self.cen_label.current_object].deleteLater()
            del (self.cen_label.objects[self.cen_label.current_object])

    def on_clicked_2(self):
        self.info_line.setText(f'button pressed')
        self.cen_label.hide()

    def on_clicked_3(self):
        self.images_list.append(Image('data/IMG_000126.JPG', model=model))
        pixmap = QPixmap(self.images_list[-1].path).scaled(1200, 800)
        self.cen_label.setPixmap(pixmap)


if __name__ == "__main__":
    import sys

    model = build_model()
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.load_weights('data/U-net/weights.hdf5')

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
